// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xWXW/bNhT9K8TdHhlJtpN2EBBgbp0OBoo22MdTkAeGupbYUSRHXsc2Av33gZTljzhL",
	"F7QB+mJLInV17jmHh3wAaVtnDRoKUD5AkA22Il1OpbRLQ/FSaP15AeXNAzhvHXpSmKaoKv7+7HEBJfyU",
	"70vl2zr5fAZdx8HjP0vlsYLyJr50y4E2DqEEe/cFJUHHny/zCVcDnO6243DlvfUJWVUpUtYIfX2AbCF0",
	"QP4IrLQVxv8Kg/TKxbeg7CuxNMYB16J1GqEccVhY3wqCEpShX4BDK9aqXbZQjsZvObTK9HfFrhVlCGv0",
	"wGF9ZoVTZ7FojeYM1+TFGYk6wbhTplKmhnJHCq8JLwuuCS9H47eJrxZDEPV/wh2GDxDDXwbXDiVhxTCx",
	"kyB/RFNTA+V5URQJ9fBgtMMdyEc8L4fdivVlrAvdY4m3dA4wn5Ab5rPT5v5skM1nRzqMJ0dtTN68RhOT",
	"N4n0A5O9zFlGtE9Ita3F0uihUiuhNdKxPuOLi9fobHxxcapOAnSqSZymzML2a8WQkIkHbIXScZrGOjQq",
	"NH8r82sdH2bStsC33cMHZYSRCj2r8B515CfqfMzJZ4dmej1nwaFUCyVFfM7sglGDbF8hoL9XMrKmlUQT",
	"cM8yTJ2QDbJxVgCHpY/QGiIXyjxfrVaZSMOZ9XW+fTfkH+fvrz79cXU2zoqsoVZHXKRIH8OeXs+Bwz36",
	"0GMdZUVWxKnWoRFOQQmTrMgmwMEJahLtuehFTjc10qkLfkdaehOY0JoNkzNIRX3qfl5BCb8hTbWeDsWi",
	"XsHZCD5WHBfFIApuzemc3rKXfwnxQ0N0p1gmbMPXknmXpzsjCO/FpvfBcQ9b3GwA1eu6EEtNL8L1HJw+",
	"0Z/4+PJxrsUpve1vYMdY3BScDU8I8N6jIAzM4GoQ4JT/aVUNfPRrBQO9s9Xmu7V3uIGd9jhEBVkmqiqD",
	"w/VKfondiSFG3w3ZM7AG3WWkMC7UH9oAHd8vx/xBVd3X16QZHMHuNkxRYPPZqTc+KDOY490mbU9OeNEi",
	"oQ/pTHRcfD6LeSb2ii6QZAMxW6FMybHPTFWdSM3/J13pYHX7jUHxjb44tMN5cf76VjB2IPbHdGDHIW5d",
	"gzH63SkXTuX3o3hw/TcAAP//iKJniG4LAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
