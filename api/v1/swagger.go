// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xX3W7bOBN9FWK+71KRZOenCwEB1m3ahYFuW+y2vWlywZBjmy1FquQosRHo3RekJNuy",
	"nXTTTYDeBI7EIc+cOXOGugNhy8oaNOShuAMvFljy+HMihK0Nva+pqik84Fq/n0Hx5Q64lIqUNVx/cLZC",
	"Rwo9FDOuPSZQbT26AyXD3/87nEEB/8s2p2XdUdn0ApomAYffa+VQQvElBF0lQKsKoQB7/RUFQZM8vM07",
	"vO0QT00AHNY/Auc119wIDD8leuFUFQKhgFe1c2iI8XZz1i1M2ccF9v8w5ZnDyqFHQyjZ9Ypxw5QhnKNj",
	"ZBkaXzsMe9SOi1XKLi8vzUfLJBK6UhlktEDmkOt+y4StbM0MogzxUt0o2S4SHR5Tl9fowlGjPE8vDSSA",
	"S15WGqEYjfPjBGbWlZygAGXo7AQSKJVRZV1Cka/J7TBCAssjyyt1JKzEOZojXJLjR8TnLTvKSGXmUKzL",
	"lJi6RKdErJ1Unl9rlPvsdSVhXJC6UbRinjjVPt1GS67GNaBrazVy8xOA+shmV019abdwHlTXI9Ryg87H",
	"BB/W5Odu2S6iPnwfxlVymMAUmgReO2dd7MSHkA7jYwzz5GpBtcNA/DCVwO9+3dqw8G5QqtFQVb8FUfFl",
	"K6rR+MXzSCyZE57niSY8H41fRDJL9J7P78XdvR5Ah08GlxWK0J8YiYzY36KZ0wKKkzzPI/z+wWidgCcX",
	"gD0ef6nM+Sgp+fI87L4vzEj9JpkDooTpxX6O7+NbVhv1vUamJBpSM4VuWKnx8SC/47Pny+74LBZl14Ef",
	"J9QYw2bWMc4M3q79VjjkYckh5ZYlGrrfdLoFQxn8udrefiiC8enpT/NiS0VYVrSKxOSRmPHpaWTG8BLv",
	"hxneDjHecq3xELbnqmALdEeeEfUhUX7euN9BZXb2lrJPHmUsqa1IlcqTEkxb8U2Z+VCsZ1u+Uj8wrn46",
	"1YGVhFSbBJSZ2VZHhriIOsKSKx1y1Tj3C+UX35T5fR4epsKW0FcS3ijDjVDomMQb1EGVgZgdNio0kw9T",
	"5isUaqZElDGzszjGNzt4dDcqjietBBofldKdM6m4WCAbpzkkULsAbUFU+SLLbm9vUx5fp9bNsy7WZ2+n",
	"r16/+/v10TjN0wWVOuAiRXoIe/JhCslmjMEozdM8LLUVGl4pKOA4zdPj0HScFpHWjFcquxllXevEZ3M8",
	"0H9/IdXOeMa17vssTvxAUyRhKqGAP5AmWk/6zYL2fGVDDmHHcZ73tel6nFeV7kjMvvpWfu2gjfdMwtL/",
	"aB4Pr7TNWlbcOb5qG2CYSW9CPbS2yDNea3oUuodAtVP9wOH17sAKS1qNf4E1b1dNApX1B8rwKjgn+m27",
	"26/CRMrJ2gpDu6Cnl1auniy9vXv5fqK9EZJlXMoUtm0oXA6bPW2MngzejiTul0A/h35tLTTJXptmd0o2",
	"P+5Vs/nCWTFFnk0v9tXyRpleLi9X04voDo6X4SvGxy/DnZl+EeyOb8o7QxILCNYLRTSWjaUquVf35F+y",
	"Fr8gr/6jgTyJSLa1cZKfPL8ujF3fZH5JOTYJhPnWy6MdYRk0V80/AQAA//9pZW3SehAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
