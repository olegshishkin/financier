// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package v1

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8yXT2/bOBPGvwox73tUZNn504WAAOs27cJAty12216aHBhyLLOlSJUcJTYCffcFKcm2",
	"bCfddBOglyCWSOqZZ34zI92BsGVlDRrykN+BFwssefx3KoStDb2vqaopXOBav59D/uUOuJSKlDVcf3C2",
	"QkcKPeRzrj0mUG1dugMlw9//O5xDDv8bbZ426h41ml1A0yTg8HutHErIv4RNVwnQqkLIwV5/RUHQJA8f",
	"8w5vO8UzEwSH9Y/Qec01NwLDvxK9cKoKGyGHV7VzaIjx9nDWLUzZxwX2P5jyzGHl0KMhlOx6xbhhyhAW",
	"6BhZhsbXDsMZteNilbLLy0vz0TKJhK5UBhktkDnkuj8yYStbM4Mow36pbpRsF4lOj6nLa3ThUeMsSy8N",
	"JIBLXlYaIR9PsuME5taVnCAHZejsBBIolVFlXUKerc3tNEICyyPLK3UkrMQCzREuyfEj4kXrjjJSmQLy",
	"dZoSU5folIi5k8rza41y370uJYwLUjeKVswTp9qn22rJ1bgWdG2tRm5+QlC/s9mlqU/tls6DdD2Clht0",
	"Pgb4MJOfu2W7ivrt+zKuksMGptAk8No562IlPqR0uD/uYZ5cLah2GIwfhhL83c9buy3cG6RqPKTqtwAV",
	"X7ZQjScvngexpCA8zxJNeD6evIhmlug9L+7V3d0eSIdPBpcVilCfGI2M2t+iKWgB+UmWZVF+f2G8DsCT",
	"C8Ier79U5nyclHx5Hk7fBzNavwnmAJQwu9iP8X28y2qjvtfIlERDaq7QDTM1OR7Ed3z2fNEdn8Wk7Hbg",
	"x4Ea97C5dYwzg7frfisc8rDkELlliYbubzrdgiEGf662jx9CMDk9/WlfbKkIy4pW0ZgsGjM5PY3OGF7i",
	"/TLD3aHGW641HtL2XBlshe7gGVUfgvLzpvsdJLNrbyn75FHGlNqKVKk8KcG0Fd+UKYawnm31lfqBcfXT",
	"oQ5aSQi1SUCZuW05MsRF5AhLrnSIVWPhF8ovvinzexEupsKW0GcS3ijDjVDomMQb1IHKYMyOGxWa6YcZ",
	"8xUKNVciYszsPI7xzQke3Y2K40krgcZHUrrnTCsuFsgmaQYJ1C5IWxBVPh+Nbm9vUx5vp9YVo26vH72d",
	"vXr97u/XR5M0SxdU6qCLFOmh7OmHGSSbMQbjNEuzsNRWaHilIIfjNEuPQ9FxWkRbR13NxB8FHii8v5Bq",
	"ZzzjWvcFFkd98CdGP5OQwx9IU62n/WEBOl/ZID6cOMmyPildcfOq0p17o6++5a6dsPEFk7D0PxrEw3fZ",
	"Zs0Td46vWvKHkfTdp5fWZnfOa02PUveQqHacH3h4vTupwpIW7i+w9u2qSaCy/kAaXoWWiX67z+1nYSrl",
	"dN0DQ52gp5dWrp4svL0X8v1A+w5IlnEpU9juP+GtsNljY/xk8naQuB+BfgD92iw0yaY+R3dKNj8uUrP5",
	"plkxRZ7NLvYxeaNMz8nL1ewi9gPHy/Dd4uO34M4UvwgNjm/yOkcSCwjNFvLYSjZNVMm9hCf/0q74zXj1",
	"HzvHk9CxDcVJdvL8QBi7fnf5JTlsEggTrcejHVojXqnRzRiaq+afAAAA//+7hgamchAAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
