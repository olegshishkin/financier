// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
)

// Account defines model for Account.
type Account struct {
	Id   string `json:"id"`
	Name string `json:"name"`
}

// Error defines model for Error.
type Error struct {
	Code    int8   `json:"code"`
	Message string `json:"message"`
}

// Id defines model for Id.
type Id struct {
	Id string `json:"id"`
}

// NewAccount defines model for NewAccount.
type NewAccount struct {
	Name string `json:"name"`
}

// AddAccountJSONRequestBody defines body for AddAccount for application/json ContentType.
type AddAccountJSONRequestBody = NewAccount

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /accounts)
	GetAllAccounts(c *gin.Context)

	// (POST /accounts)
	AddAccount(c *gin.Context)

	// (GET /accounts/{id})
	FindAccountById(c *gin.Context, id Id)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// GetAllAccounts operation middleware
func (siw *ServerInterfaceWrapper) GetAllAccounts(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetAllAccounts(c)
}

// AddAccount operation middleware
func (siw *ServerInterfaceWrapper) AddAccount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.AddAccount(c)
}

// FindAccountById operation middleware
func (siw *ServerInterfaceWrapper) FindAccountById(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id Id

	err = json.Unmarshal([]byte(c.Query("id")), &id)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Error unmarshalling parameter 'id' as JSON"), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.FindAccountById(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/accounts", wrapper.GetAllAccounts)

	router.POST(options.BaseURL+"/accounts", wrapper.AddAccount)

	router.GET(options.BaseURL+"/accounts/:id", wrapper.FindAccountById)

	return router
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+yWUW/bNhDHvwpx26Mmyc66BXqa26aDgKINNuypyANLniR2FMmRpzhGoO8+kLIsuw6y",
	"GcvLgD5Zoo7H393/7uhHELZ31qChANUjBNFhz9PjRgg7GIqPXOuPDVSfHuF7jw1U8F2xbCv2e4pawpg9",
	"b/IBt7Pb8W7M4MZ769MJUipS1nB9661DTwoDVA3XATNwR0sRWGL8xQfeO41QrTJorO85QQXK0DVk0PMH",
	"1Q89VKv1zxn0ykxvZQa0czjZYYsexgx6DIG3py7hD4MPDgWhZJgYk8/3aFrqoPqxLMvkdl5YHRwH8sq0",
	"MI4ZePxrUB4lVJ8m6OWsu4O9/fwFBUWOWl6YCCVP07C+OoG8+ukyRCWfxDqS7DI8w/uvkrrlWiOdpnL9",
	"6tVlmMntOWg0U6axU4UY4iLxYs+VjmYa29Cp0P2pzC9tXMyF7SHbU8I7ZbgRCj2TeI86xhGDlxiEVy5G",
	"DBV8dGg2tzULDoVqlOBxndmGUYds8RDQ3ysR5dZKoAm4ZAM2josO2TovIYPBR7SOyIWqKLbbbc7T59z6",
	"ttjvDcX7+s3Nh99vfljnZd5RryMXKdKn2JvbGjK4Rx8m1jIv81U0tQ4NdwoquMrL/AoycJy6pFDBJ2HT",
	"S4spYacR/4Y0eBMY15rNxjkkpz5FH4sWfkXaaL2ZnUW9grMRPnpcl+UsCu6LyDm9z17xJcSD5sGTypqw",
	"TxufGySHKXIoBO493011cBrDnpvNUJOuDR80XcT1HM40x544fPh6jiQbZ8MTyX7jkRMGZnA7J/s81xsp",
	"59invsBAr63cvVgoxyP6PJ79J0aWcSlzOO5N8gOO/1H8f6X5/0DjMVu6q3hUcvznFjOz6OzzjikKrH57",
	"Lv87ZWb9X+9qmbrZ8x4JfUgX9IuEGm/y8zjrt3HW8aUCGiTRQZy7UKWpssxTJc9L4+5bbUy1MWYQ74hZ",
	"suUaqIpCW8F1ZwNV1+V1WXCnivtV/LP0dwAAAP//kWI7uqoJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
